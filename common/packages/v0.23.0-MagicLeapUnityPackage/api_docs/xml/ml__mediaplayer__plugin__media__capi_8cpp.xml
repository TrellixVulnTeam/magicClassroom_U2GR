<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="ml__mediaplayer__plugin__media__capi_8cpp" kind="file" language="C++">
    <compoundname>ml_mediaplayer_plugin_media_capi.cpp</compoundname>
    <includes local="no">dlfcn.h</includes>
    <includes refid="ml__mediaplayer__plugin__media__capi_8h" local="yes">ml_mediaplayer_plugin_media_capi.h</includes>
    <includes refid="ml__mediaplayer__plugin__common_8h" local="yes">ml_mediaplayer_plugin_common.h</includes>
    <incdepgraph>
      <node id="164">
        <label>EGL/eglext.h</label>
      </node>
      <node id="166">
        <label>GLES2/gl2ext.h</label>
      </node>
      <node id="169">
        <label>IUnityInterface.h</label>
        <link refid="_lumin_media_player_2_external_2_apis_2_media_player_plugin_2_i_unity_interface_8h_source"/>
      </node>
      <node id="149">
        <label>/Users/svccontentjenkins/jenkins2/w/sdkdir/leapcore/frameworks/unity_integration/Source/Libs/LuminMediaPlayer/External/Apis/MediaPlayerPlugin/ml_mediaplayer_plugin_media_capi.cpp</label>
        <link refid="ml__mediaplayer__plugin__media__capi_8cpp"/>
        <childnode refid="150" relation="include">
        </childnode>
        <childnode refid="151" relation="include">
        </childnode>
        <childnode refid="156" relation="include">
        </childnode>
      </node>
      <node id="160">
        <label>string</label>
      </node>
      <node id="162">
        <label>map</label>
      </node>
      <node id="151">
        <label>ml_mediaplayer_plugin_media_capi.h</label>
        <link refid="ml__mediaplayer__plugin__media__capi_8h_source"/>
        <childnode refid="152" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
        <childnode refid="154" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
      </node>
      <node id="168">
        <label>IUnityGraphics.h</label>
        <link refid="_lumin_media_player_2_external_2_apis_2_media_player_plugin_2_i_unity_graphics_8h_source"/>
        <childnode refid="169" relation="include">
        </childnode>
      </node>
      <node id="157">
        <label>pthread.h</label>
      </node>
      <node id="158">
        <label>unistd.h</label>
      </node>
      <node id="156">
        <label>ml_mediaplayer_plugin_common.h</label>
        <link refid="ml__mediaplayer__plugin__common_8h_source"/>
        <childnode refid="157" relation="include">
        </childnode>
        <childnode refid="158" relation="include">
        </childnode>
        <childnode refid="159" relation="include">
        </childnode>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="162" relation="include">
        </childnode>
        <childnode refid="163" relation="include">
        </childnode>
        <childnode refid="164" relation="include">
        </childnode>
        <childnode refid="165" relation="include">
        </childnode>
        <childnode refid="166" relation="include">
        </childnode>
        <childnode refid="167" relation="include">
        </childnode>
        <childnode refid="152" relation="include">
        </childnode>
        <childnode refid="154" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
      </node>
      <node id="161">
        <label>vector</label>
      </node>
      <node id="154">
        <label>ml_media_cea608_caption.h</label>
      </node>
      <node id="165">
        <label>GLES2/gl2.h</label>
      </node>
      <node id="152">
        <label>ml_media_player.h</label>
      </node>
      <node id="163">
        <label>EGL/egl.h</label>
      </node>
      <node id="155">
        <label>ml_platform.h</label>
      </node>
      <node id="153">
        <label>ml_media_format.h</label>
      </node>
      <node id="167">
        <label>ml_logging.h</label>
      </node>
      <node id="159">
        <label>inttypes.h</label>
      </node>
      <node id="150">
        <label>dlfcn.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_media_c_a_p_i">MediaCAPI</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="ml__mediaplayer__plugin__media__capi_8cpp_1ad26437b1cb69601bc7ec065198be1feb" prot="public" static="no">
        <name>MEDIA_CAPI_OPEN_LIBRARY</name>
        <param><defname>LIBRARY</defname></param>
        <initializer>LIBRARY##_handle = dlopen(LIBRARY##_name, RTLD_LOCAL | RTLD_LAZY); \
            if (LIBRARY##_handle == nullptr) { \
                ML_LOG_TAG(Fatal, _AppName, &quot;%s() failed to open \&quot;%s\&quot;.&quot;, __FUNCTION__, LIBRARY##_name); \
                return; \
            }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/svccontentjenkins/jenkins2/w/sdkdir/leapcore/frameworks/unity_integration/Source/Libs/LuminMediaPlayer/External/Apis/MediaPlayerPlugin/ml_mediaplayer_plugin_media_capi.cpp" line="106" column="17"/>
      </memberdef>
      <memberdef kind="define" id="ml__mediaplayer__plugin__media__capi_8cpp_1ae2824450ca76b5cc190b3732b4ddfa74" prot="public" static="no">
        <name>MEDIAPLAYER_SYMBOL_LOOKUP</name>
        <param><defname>SYMBOL</defname></param>
        <initializer>SYMBOL = (decltype(SYMBOL)) dlsym_with_error(#SYMBOL, mediaplayer_library_name, mediaplayer_library_handle)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/svccontentjenkins/jenkins2/w/sdkdir/leapcore/frameworks/unity_integration/Source/Libs/LuminMediaPlayer/External/Apis/MediaPlayerPlugin/ml_mediaplayer_plugin_media_capi.cpp" line="134" column="17"/>
      </memberdef>
      <memberdef kind="define" id="ml__mediaplayer__plugin__media__capi_8cpp_1a43d5d348ad80c03b574fa41f1d6e6a7a" prot="public" static="no">
        <name>MEDIA_CCPARSER_SYMBOL_LOOKUP</name>
        <param><defname>SYMBOL</defname></param>
        <initializer>SYMBOL = (decltype(SYMBOL)) dlsym_with_error(#SYMBOL, media_ccparser_library_name, media_ccparser_library_handle)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/svccontentjenkins/jenkins2/w/sdkdir/leapcore/frameworks/unity_integration/Source/Libs/LuminMediaPlayer/External/Apis/MediaPlayerPlugin/ml_mediaplayer_plugin_media_capi.cpp" line="136" column="17"/>
      </memberdef>
      <memberdef kind="define" id="ml__mediaplayer__plugin__media__capi_8cpp_1a755842b10dad0114ef4bb708c88d76ff" prot="public" static="no">
        <name>MEDIA_FORMAT_SYMBOL_LOOKUP</name>
        <param><defname>SYMBOL</defname></param>
        <initializer>SYMBOL = (decltype(SYMBOL)) dlsym_with_error(#SYMBOL, media_format_library_name, media_format_library_handle)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/svccontentjenkins/jenkins2/w/sdkdir/leapcore/frameworks/unity_integration/Source/Libs/LuminMediaPlayer/External/Apis/MediaPlayerPlugin/ml_mediaplayer_plugin_media_capi.cpp" line="138" column="17"/>
      </memberdef>
      <memberdef kind="define" id="ml__mediaplayer__plugin__media__capi_8cpp_1a5f8145283a7b7f5952b07fec6ac2f79d" prot="public" static="no">
        <name>MEDIA_CAPI_CLOSE_LIBRARY</name>
        <param><defname>LIBRARY</defname></param>
        <initializer>if (LIBRARY##_handle != nullptr) { \
                if (!dlclose(LIBRARY##_handle)) { \
                    ML_LOG_TAG(Debug, _AppName, &quot;%s() failed to close \&quot;%s\&quot;.&quot;, __FUNCTION__, LIBRARY##_name); \
                } \
                LIBRARY##_handle = nullptr; \
            }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/svccontentjenkins/jenkins2/w/sdkdir/leapcore/frameworks/unity_integration/Source/Libs/LuminMediaPlayer/External/Apis/MediaPlayerPlugin/ml_mediaplayer_plugin_media_capi.cpp" line="168" column="17"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;dlfcn.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_mediaplayer_plugin_media_capi.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_mediaplayer_plugin_common.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Namespace<sp/>to<sp/>encapsulate<sp/>the<sp/>dynamic<sp/>function<sp/>pointers<sp/>that<sp/>will<sp/>be<sp/>looked<sp/>up<sp/>on<sp/>runtime.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_media_c_a_p_i" kindref="compound">MediaCAPI</ref></highlight></codeline>
<codeline lineno="9"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Common<sp/>Media<sp/>Player</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerCreate)(MLHandle*)<sp/>=<sp/>&amp;::MLMediaPlayerCreate;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MLMediaPlayerDestroy<sp/>should<sp/>not<sp/>be<sp/>dlsym()ed<sp/>because<sp/>it<sp/>is<sp/>used<sp/>by<sp/>the<sp/>destroy<sp/>threads.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>it<sp/>is<sp/>dlsym()ed<sp/>then<sp/>we<sp/>need<sp/>to<sp/>block<sp/>the<sp/>dlclose()<sp/>until<sp/>all<sp/>destroy<sp/>threads<sp/>are<sp/>done<sp/>using<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerDestroy)(MLHandle)<sp/>=<sp/>&amp;::MLMediaPlayerDestroy;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerGetFrameTransformationMatrix)(MLHandle,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">[16])<sp/>=<sp/>&amp;::MLMediaPlayerGetFrameTransformationMatrix;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerAcquireNextAvailableBuffer)(MLHandle,<sp/>uint64_t*)<sp/>=<sp/>&amp;::MLMediaPlayerAcquireNextAvailableBuffer;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerGetFrameTimestamp)(MLHandle,<sp/>int64_t<sp/>*)<sp/>=<sp/>&amp;::MLMediaPlayerGetFrameTimestamp;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerReleaseBuffer)(MLHandle,<sp/>uint64_t)<sp/>=<sp/>&amp;::MLMediaPlayerReleaseBuffer;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerSetOnBufferAvailableCallback)(MLHandle,<sp/>MLMediaPlayerOnFrameAvailableCallback,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>=<sp/>&amp;::MLMediaPlayerSetOnBufferAvailableCallback;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerSetDataSourceForURI)(MLHandle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>=<sp/>&amp;::MLMediaPlayerSetDataSourceForURI;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerSetDataSourceForPath)(MLHandle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>=<sp/>&amp;::MLMediaPlayerSetDataSourceForPath;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerPrepareAsync)(MLHandle)<sp/>=<sp/>&amp;::MLMediaPlayerPrepareAsync;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerSetLooping)(MLHandle,<sp/>bool)<sp/>=<sp/>&amp;::MLMediaPlayerSetLooping;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerStart)(MLHandle)<sp/>=<sp/>&amp;::MLMediaPlayerStart;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerPause)(MLHandle)<sp/>=<sp/>&amp;::MLMediaPlayerPause;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerSeekTo)(MLHandle,<sp/>int,<sp/>MLMediaSeekMode)<sp/>=<sp/>&amp;::MLMediaPlayerSeekTo;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerStop)(MLHandle)<sp/>=<sp/>&amp;::MLMediaPlayerStop;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerSetVolume)(MLHandle,<sp/>float)<sp/>=<sp/>&amp;::MLMediaPlayerSetVolume;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerReleaseDRM)(MLHandle)<sp/>=<sp/>&amp;::MLMediaPlayerReleaseDRM;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerGetDuration)(MLHandle,<sp/>int32_t*)<sp/>=<sp/>&amp;::MLMediaPlayerGetDuration;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerGetCurrentPosition)(MLHandle,<sp/>int32_t*)<sp/>=<sp/>&amp;::MLMediaPlayerGetCurrentPosition;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerGetVideoSize)(MLHandle,<sp/>int32_t*,<sp/>int32_t*)<sp/>=<sp/>&amp;::MLMediaPlayerGetVideoSize;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerGetTrackCount)(MLHandle,<sp/>uint32_t*)<sp/>=<sp/>&amp;::MLMediaPlayerGetTrackCount;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerPollStates)(MLHandle,<sp/>uint16_t,<sp/>uint16_t*)<sp/>=<sp/>&amp;::MLMediaPlayerPollStates;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerGetTrackType)(MLHandle,<sp/>uint32_t,<sp/><ref refid="namespace_unity_engine_1_1_x_r_1_1_magic_leap_1abbdf743a9828755ba8d514082dfb71b0" kindref="member">MLMediaPlayerTrackType</ref>*)<sp/>=<sp/>&amp;::MLMediaPlayerGetTrackType;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerSelectTrack)(MLHandle,<sp/>uint32_t)<sp/>=<sp/>&amp;::MLMediaPlayerSelectTrack;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerUnselectTrack)(MLHandle,<sp/>uint32_t)<sp/>=<sp/>&amp;::MLMediaPlayerUnselectTrack;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerGetTrackLanguage)(MLHandle,<sp/>uint32_t,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)<sp/>=<sp/>&amp;::MLMediaPlayerGetTrackLanguage;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerGetTimedText)(MLHandle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**,<sp/>int32_t*,<sp/>int32_t*)<sp/>=<sp/>&amp;::MLMediaPlayerGetTimedText;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Common<sp/>Media<sp/>DRM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaDRMCreate)(MLUUID,<sp/>MLHandle*)<sp/>=<sp/>&amp;::MLMediaDRMCreate;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaDRMRelease)(MLHandle)<sp/>=<sp/>&amp;::MLMediaDRMRelease;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaDRMOpenSession)(MLHandle,<sp/>MLMediaDRMByteArray*)<sp/>=<sp/>&amp;::MLMediaDRMOpenSession;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaDRMCloseSession)(MLHandle,<sp/>MLMediaDRMByteArray*)<sp/>=<sp/>&amp;::MLMediaDRMCloseSession;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaDRMGetProvisionRequest)(MLHandle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/>MLMediaDRMRequestMessage*)<sp/>=<sp/>&amp;::MLMediaDRMGetProvisionRequest;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaDRMProvideProvisionResponse)(MLHandle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MLMediaDRMByteArray*,<sp/>MLMediaDRMByteArray*,<sp/>MLMediaDRMByteArray*)<sp/>=<sp/>&amp;::MLMediaDRMProvideProvisionResponse;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaDRMGetKeyRequest)(MLHandle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MLMediaDRMByteArray*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MLMediaDRMKeyRequestInputParam*,<sp/>MLMediaDRMRequestMessage*)<sp/>=<sp/>&amp;::MLMediaDRMGetKeyRequest;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaDRMProvideKeyResponse)(MLHandle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MLMediaDRMByteArray*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MLMediaDRMByteArray*,<sp/>MLMediaDRMByteArray*)<sp/>=<sp/>&amp;::MLMediaDRMProvideKeyResponse;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaDRMKeyValueArrayAllocate)(size_t,<sp/>MLMediaDRMKeyValueArray*)<sp/>=<sp/>&amp;::MLMediaDRMKeyValueArrayAllocate;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaDRMKeyValueArrayAdd)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MLMediaDRMKeyValue*,<sp/>MLMediaDRMKeyValueArray*)<sp/>=<sp/>&amp;::MLMediaDRMKeyValueArrayAdd;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaDRMByteArrayRelease)(MLMediaDRMByteArray*)<sp/>=<sp/>&amp;::MLMediaDRMByteArrayRelease;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaDRMKeyValueArrayRelease)(MLMediaDRMKeyValueArray*)<sp/>=<sp/>&amp;::MLMediaDRMKeyValueArrayRelease;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaDRMRequestMessageRelease)(MLMediaDRMRequestMessage*)<sp/>=<sp/>&amp;::MLMediaDRMRequestMessageRelease;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Common<sp/>Media<sp/>Format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaFormatObjectToString)(MLHandle,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>=<sp/>&amp;::MLMediaFormatObjectToString;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>API<sp/>Level<sp/>2<sp/>Media<sp/>Player</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerGetTrackDRMInfo)(MLHandle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MLMediaPlayerTrackInfo*,<sp/>MLMediaPlayerTrackDRMInfo**)<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerPrepareTrackDRM)(MLHandle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MLMediaPlayerTrackDRMSessionInfo*)<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerSetEventCallbacksEx)(MLHandle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MLMediaPlayerEventCallbacksEx*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerGetSubtitleEx)(MLHandle,<sp/>MLMediaPlayerSubtitleData**)<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaCCParserCreate)(MLHandle*)<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaCCParserGetDisplayable)(MLHandle,<sp/>uint8_t*<sp/>,<sp/>int32_t,<sp/>MLCea608CaptionSegment*)<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaCCParserReleaseSegment)(MLHandle,<sp/>MLCea608CaptionSegment*)<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaCCParserDestroy)(MLHandle)<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerGetTrackMediaFormat)(MLHandle,<sp/>uint32_t,<sp/>MLHandle*)<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerReleaseSubtitleEx)(MLHandle)<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaFormatGetKeyString)(MLHandle,<sp/>MLMediaFormatKey,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaFormatGetKeyValueInt32)(MLHandle,<sp/>MLMediaFormatKey,<sp/>int32_t*)<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaFormatDestroy)(MLHandle)<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>API<sp/>Level<sp/>4<sp/>Media<sp/>Player</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerSetOnMediaTimedTextUpdateCallback)(MLHandle<sp/>media_player,<sp/>MLMediaPlayerOnMediaTimedTextUpdateCallback<sp/>on_media_timed_text_callback,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerGetWebVTTData)(MLHandle<sp/>media_player,<sp/>MLHandle<sp/>timed_text,<sp/>MLWebVTTData**<sp/>out_webvtt_data)<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>MLResult<sp/>(*MLMediaPlayerSetOnMediaSubtitleUpdateCallback)(MLHandle,<sp/>MLMediaPlayerOnMediaSubtitleUpdateCallback,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Library<sp/>handle<sp/>and<sp/>name<sp/>variables,<sp/>follow<sp/>this<sp/>naming<sp/>convention<sp/>in<sp/>order<sp/>to<sp/>use<sp/>open/close<sp/>macros.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mediaplayer_library_handle<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>media_ccparser_library_handle<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>media_format_library_handle<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>mediaplayer_library_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;libml_mediaplayer.so&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>media_ccparser_library_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;libml_media_ccparser.so&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>media_format_library_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;libml_mediaformat.so&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Load()</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cache<sp/>the<sp/>API<sp/>version<sp/>we<sp/>are<sp/>on<sp/>for<sp/>future<sp/>calls.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>platform_api_level<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLResult<sp/>result<sp/>=<sp/>MLPlatformGetAPILevel(&amp;platform_api_level);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/>MLResult_Ok)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_LOG_TAG(Fatal,<sp/>_AppName,<sp/></highlight><highlight class="stringliteral">&quot;%s()<sp/>failed<sp/>to<sp/>get<sp/>platform<sp/>API<sp/>level.<sp/>Error:<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__FUNCTION__,<sp/>MLMediaResultGetString(result));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(platform_api_level<sp/>&lt;<sp/>MINIMUM_REQUIRED_PLATFORM_API_LEVEL)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_LOG_TAG(Fatal,<sp/>_AppName,<sp/></highlight><highlight class="stringliteral">&quot;%s()<sp/>failed<sp/>to<sp/>meet<sp/>minimum<sp/>platform<sp/>API<sp/>level<sp/>of:<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__FUNCTION__,<sp/>MINIMUM_REQUIRED_PLATFORM_API_LEVEL);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>MEDIA_CAPI_OPEN_LIBRARY(LIBRARY)<sp/>\</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LIBRARY##_handle<sp/>=<sp/>dlopen(LIBRARY##_name,<sp/>RTLD_LOCAL<sp/>|<sp/>RTLD_LAZY);<sp/>\</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(LIBRARY##_handle<sp/>==<sp/>nullptr)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_LOG_TAG(Fatal,<sp/>_AppName,<sp/>&quot;%s()<sp/>failed<sp/>to<sp/>open<sp/>\&quot;%s\&quot;.&quot;,<sp/>__FUNCTION__,<sp/>LIBRARY##_name);<sp/>\</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;<sp/>\</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MEDIA_CAPI_OPEN_LIBRARY(mediaplayer_library);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MEDIA_CAPI_OPEN_LIBRARY(media_ccparser_library);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MEDIA_CAPI_OPEN_LIBRARY(media_format_library);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#undef<sp/>MEDIA_CAPI_OPEN_LIBRARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dlsym_with_error<sp/>=<sp/>[&amp;]<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>symbol_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lib_name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>lib_handle)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>symbol<sp/>=<sp/>dlsym(lib_handle,<sp/>symbol_name);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(symbol<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_LOG_TAG(Fatal,<sp/>_AppName,<sp/></highlight><highlight class="stringliteral">&quot;%s()<sp/>failed<sp/>to<sp/>load<sp/>symbol<sp/>\&quot;%s\&quot;<sp/>from<sp/>\&quot;%s\&quot;.&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__,<sp/>symbol_name,<sp/>lib_name);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_LOG_TAG(Debug,<sp/>_AppName,<sp/></highlight><highlight class="stringliteral">&quot;%s()<sp/>loaded<sp/>symbol<sp/>\&quot;%s\&quot;<sp/>[%p]<sp/>from<sp/>\&quot;%s\&quot;.&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__,<sp/>symbol_name,<sp/>symbol,<sp/>lib_name);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>symbol;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>MEDIAPLAYER_SYMBOL_LOOKUP(SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYMBOL<sp/>=<sp/>(decltype(SYMBOL))<sp/>dlsym_with_error(#SYMBOL,<sp/>mediaplayer_library_name,<sp/>mediaplayer_library_handle)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>MEDIA_CCPARSER_SYMBOL_LOOKUP(SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="137"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYMBOL<sp/>=<sp/>(decltype(SYMBOL))<sp/>dlsym_with_error(#SYMBOL,<sp/>media_ccparser_library_name,<sp/>media_ccparser_library_handle)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>MEDIA_FORMAT_SYMBOL_LOOKUP(SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYMBOL<sp/>=<sp/>(decltype(SYMBOL))<sp/>dlsym_with_error(#SYMBOL,<sp/>media_format_library_name,<sp/>media_format_library_handle)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MEDIAPLAYER_SYMBOL_LOOKUP(MLMediaPlayerGetTrackDRMInfo);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MEDIAPLAYER_SYMBOL_LOOKUP(MLMediaPlayerPrepareTrackDRM);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MEDIAPLAYER_SYMBOL_LOOKUP(MLMediaPlayerSetEventCallbacksEx);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MEDIAPLAYER_SYMBOL_LOOKUP(MLMediaPlayerGetSubtitleEx);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MEDIAPLAYER_SYMBOL_LOOKUP(MLMediaPlayerGetTrackMediaFormat);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MEDIAPLAYER_SYMBOL_LOOKUP(MLMediaPlayerReleaseSubtitleEx);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MEDIAPLAYER_SYMBOL_LOOKUP(MLMediaPlayerGetTimedText);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MEDIAPLAYER_SYMBOL_LOOKUP(MLMediaPlayerSetOnMediaTimedTextUpdateCallback);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MEDIAPLAYER_SYMBOL_LOOKUP(MLMediaPlayerGetWebVTTData);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MEDIAPLAYER_SYMBOL_LOOKUP(MLMediaPlayerSetOnMediaSubtitleUpdateCallback);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MEDIA_CCPARSER_SYMBOL_LOOKUP(MLMediaCCParserCreate);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MEDIA_CCPARSER_SYMBOL_LOOKUP(MLMediaCCParserGetDisplayable);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MEDIA_CCPARSER_SYMBOL_LOOKUP(MLMediaCCParserReleaseSegment);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MEDIA_CCPARSER_SYMBOL_LOOKUP(MLMediaCCParserDestroy);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MEDIA_FORMAT_SYMBOL_LOOKUP(MLMediaFormatGetKeyString);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MEDIA_FORMAT_SYMBOL_LOOKUP(MLMediaFormatGetKeyValueInt32);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MEDIA_FORMAT_SYMBOL_LOOKUP(MLMediaFormatDestroy);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#undef<sp/>MEDIAPLAYER_SYMBOL_LOOKUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#undef<sp/>MEDIA_CCPARSER_SYMBOL_LOOKUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#undef<sp/>MEDIA_FORMAT_SYMBOL_LOOKUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Unload()</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>MEDIA_CAPI_CLOSE_LIBRARY(LIBRARY)<sp/>\</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(LIBRARY##_handle<sp/>!=<sp/>nullptr)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!dlclose(LIBRARY##_handle))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_LOG_TAG(Debug,<sp/>_AppName,<sp/>&quot;%s()<sp/>failed<sp/>to<sp/>close<sp/>\&quot;%s\&quot;.&quot;,<sp/>__FUNCTION__,<sp/>LIBRARY##_name);<sp/>\</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LIBRARY##_handle<sp/>=<sp/>nullptr;<sp/>\</highlight></codeline>
<codeline lineno="174"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MEDIA_CAPI_CLOSE_LIBRARY(mediaplayer_library);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MEDIA_CAPI_CLOSE_LIBRARY(media_ccparser_library);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MEDIA_CAPI_CLOSE_LIBRARY(media_format_library);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#undef<sp/>MEDIA_CAPI_CLOSE_LIBRARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/svccontentjenkins/jenkins2/w/sdkdir/leapcore/frameworks/unity_integration/Source/Libs/LuminMediaPlayer/External/Apis/MediaPlayerPlugin/ml_mediaplayer_plugin_media_capi.cpp"/>
  </compounddef>
</doxygen>
